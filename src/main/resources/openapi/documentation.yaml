openapi: "3.0.3"
info:
  title: "Delta API"
  description: "API for Delta"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
  - url: "http://delta-backend"
paths:
  /admin/event:
    put:
      tags:
        - admin
      description: "Create an event"
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
      responses:
        "201":
          description: "created event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEvent"
  /admin/event/{id}:
    delete:
      tags:
        - admin
      description: "Delete an event"
      operationId: deleteEvent
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Event deleted"
    post:
      tags:
        - admin
      description: "Change an event"
      operationId: changeEvent
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
      responses:
        "200":
          description: "Event changed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullEvent'
  /admin/event/{id}/category:
    post:
      tags:
        - admin
        - category
      description: "Set the categories of an event"
      operationId: setCategories
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
              type: string
              format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        "200":
          description: "Categories set"
  /admin/event/{id}/participant:
    delete:
      tags:
        - admin
      description: "Remove a participant from an event"
      operationId: removeParticipant
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailObject'
      responses:
        "200":
          description: "Participant removed"
    post:
      tags:
        - admin
      description: "Alter participant type"
      operationId: alterParticipantType
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeParticipant'
      responses:
        "200":
          description: "Participant type changed"
  /user/event/{id}:
    post:
      tags:
        - user
      description: "Join an event"
      operationId: joinEvent
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Event joined"
    delete:
      tags:
        - user
      description: "Leave an event"
      operationId: leaveEvent
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Event left"
  /event:
    get:
      tags:
        - general
      description: "Get future events"
      operationId: getFutureEvents
      parameters:
        - in: query
          name: categories
          description: "Categories"
          required: false
          schema:
            type: string
        - in: query
          name: onlyFuture
          description: "Future events only"
          required: false
          schema:
            type: boolean
        - in: query
          name: onlyPast
          description: "Past events only"
          required: false
          schema:
            type: boolean
        - in: query
          name: onlyMine
          description: "Only my events"
          required: false
          schema:
            type: boolean
        - in: query
          name: onlyJoined
          description: "Only joined events"
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: "All future events"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FullEvent"
  /event/{id}:
    get:
      tags:
        - general
      description: "Get an event"
      operationId: getEvent
      parameters:
        - name: id
          in: path
          description: "Event id"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Event joined"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEvent"
  /category:
    get:
      tags:
        - category
      description: "Get all categories"
      operationId: getCategories
      responses:
        "200":
          description: "All categories"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
    put:
        tags:
            - category
        description: "Create a category"
        operationId: createCategory
        requestBody:
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/CreateCategory'
        responses:
          "201":
            description: "created category"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Category"
components:
  schemas:
    CreateEvent:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        location:
          type: string
        public:
          type: boolean
        signupDeadline:
          type: string
          format: date-time
        participantLimit:
          type: integer
        sendNotificationEmail:
          type: boolean
    Event:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        location:
          type: string
        id:
          type: string
          format: uuid
        public:
          type: boolean
        signupDeadline:
          type: string
          format: date-time
        participantLimit:
          type: integer
    FullEvent:
      type: object
      properties:
        event:
          $ref: "#/components/schemas/Event"
        participants:
          type: array
          items:
            $ref: "#/components/schemas/Participant"
        hosts:
          type: array
          items:
            $ref: "#/components/schemas/Participant"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
    EmailObject:
      type: object
      properties:
        email:
          type: string
          format: email
    Participant:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
    ChangeParticipant:
      type: object
      properties:
        email:
          type: string
          format: email
        type:
          type: string
          enum: [HOST, PARTICIPANT]
    LeaveEvent:
      properties:
        otp:
          type: string
          format: uuid
    Category:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
    CreateCategory:
        type: object
        properties:
          name:
            type: string
